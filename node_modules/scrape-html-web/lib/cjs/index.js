"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrapeHtmlWeb = void 0;
const cheerio = __importStar(require("cheerio"));
const axios_1 = __importDefault(require("axios"));
function buildDefineURI(url, bypassCors) {
    if (bypassCors) {
        if (typeof bypassCors === "boolean") {
            return bypassCors
                ? `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`
                : url;
        }
        else {
            const { customURI } = bypassCors;
            return customURI
                ? `${customURI}${encodeURIComponent(url)}`
                : `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`;
        }
    }
    else {
        return url;
    }
}
function buildbodyHTML(response, bypassCors) {
    if (bypassCors) {
        if (typeof bypassCors === "boolean") {
            return response.data.contents;
        }
        else {
            const { paramExstract } = bypassCors;
            return paramExstract ? response.data[paramExstract] : response.data;
        }
    }
    else {
        return response.data;
    }
}
function scrapeHtmlWeb(options) {
    return __awaiter(this, void 0, void 0, function* () {
        let result = [];
        const { url, mainSelector, childrenSelector, list, bypassCors } = options || {};
        const defineURI = buildDefineURI(url, bypassCors);
        try {
            // Use axios for HTTP requests
            const response = yield axios_1.default.get(defineURI);
            const bodyHTML = buildbodyHTML(response, bypassCors);
            const $ = cheerio.load(bodyHTML);
            $(mainSelector)
                .children()
                .each((_, parentElem) => {
                let obj = {};
                childrenSelector.forEach((el) => {
                    const { key, selector, attr, type, canBeEmpty, replace } = el;
                    const value = $(parentElem).find(selector).length
                        ? $(parentElem).find(selector)
                        : $(parentElem);
                    if (!attr && !type) {
                        let text = value.text().trim();
                        if (replace) {
                            if (replace instanceof RegExp) {
                                text = text.replace(replace, "");
                            }
                            else if (typeof replace === "function") {
                                text = replace(text);
                            }
                        }
                        obj = Object.assign(Object.assign({}, obj), { [key]: text });
                    }
                    if (attr && attr !== "") {
                        if (value.attr(attr) || canBeEmpty) {
                            obj = Object.assign(Object.assign({}, obj), { [key]: value.attr(attr) });
                        }
                    }
                    else if (type === "text") {
                        if (value.text().trim() || canBeEmpty) {
                            let text = value.text().trim();
                            if (replace) {
                                if (replace instanceof RegExp) {
                                    text = text.replace(replace, "");
                                }
                                else if (typeof replace === "function") {
                                    text = replace(text);
                                }
                            }
                            obj = Object.assign(Object.assign({}, obj), { [key]: text });
                        }
                    }
                    else if (type === "html") {
                        if (value.prop("outerHTML") || canBeEmpty) {
                            let html = value.prop("outerHTML");
                            if (replace) {
                                if (replace instanceof RegExp) {
                                    if (html) {
                                        html = html.replace(replace, "");
                                    }
                                }
                                else if (typeof replace === "function") {
                                    if (html) {
                                        html = replace(html);
                                    }
                                }
                            }
                            obj = Object.assign(Object.assign({}, obj), { [key]: html });
                        }
                    }
                });
                if (Object.keys(obj).length) {
                    result.push(obj);
                }
                if (!list) {
                    return false;
                }
            });
        }
        catch (err) {
            console.error("Error during request:", err);
            throw err;
        }
        return result;
    });
}
exports.scrapeHtmlWeb = scrapeHtmlWeb;
exports.default = {
    scrapeHtmlWeb,
};
